set nocompatible              " be iMproved, required
filetype off                  " required

" --------------- Plugins installed -------------------------------------------

" Get plugging!
call plug#begin('~/.vim/plugged')

" Syntax plugins
Plug 'Shougo/vimproc.vim'
Plug 'ap/vim-css-color'
Plug 'cespare/vim-toml'
Plug 'dag/vim2hs'
Plug 'derekwyatt/vim-scala'
Plug 'digitaltoad/vim-jade'
Plug 'eagletmt/ghcmod-vim'
Plug 'ekalinin/Dockerfile.vim'
Plug 'elixir-lang/vim-elixir'
Plug 'hashivim/vim-terraform'
Plug 'kchmck/vim-coffee-script'
Plug 'mustache/vim-mustache-handlebars'
Plug 'neomake/neomake'
Plug 'rodjek/vim-puppet'
Plug 'rust-lang/rust.vim'
Plug 'slim-template/vim-slim'
Plug 'tikhomirov/vim-glsl'
Plug 'vim-scripts/applescript.vim'
Plug 'wavded/vim-stylus'
Plug 'zah/nim.vim'
Plug 'google/vim-jsonnet'
Plug 'jjo/vim-cue'
Plug 'pangloss/vim-javascript'
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'

" Utility plugins
Plug 'AndrewRadev/sideways.vim'
Plug 'ayu-theme/ayu-vim'
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'Shougo/vimproc.vim'
Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}
Plug 'burnettk/vim-angular'
Plug 'danro/rename.vim'
Plug 'diepm/vim-rest-console'
Plug 'ervandew/supertab'
Plug 'fatih/vim-go'
Plug 'ntpeters/vim-better-whitespace'
Plug 'nvie/vim-flake8'
Plug 'rking/ag.vim'
Plug 'ruanyl/vim-gh-line'
Plug 'scrooloose/nerdtree'
Plug 'tomtom/tlib_vim'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-ragtag'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-vinegar'
Plug 'vim-scripts/taglist.vim'
Plug 'wellle/targets.vim'
Plug 'xolox/vim-misc'
Plug 'bling/vim-airline'

" Requires external fzf binary
set rtp+=/usr/local/opt/fzf
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

call plug#end()

syntax on                     " Turn syntax on
filetype plugin indent on     " Set to detect filetype
set re=1                      " Enable newer regexs

let g:tagbar_left=1           " Vim tagbar shortcut

" --------------- Color and Scheme Preferences --------------------------------

" Disable molokai for now, as I'm working in a super bright space and it's a
" dark color scheme
" colorscheme molokai
" let g:molokai_original = 1
" hi Normal guifg=NONE guibg=NONE ctermfg=NONE ctermbg=NONE

set termguicolors
let ayucolor="light"
colorscheme ayu

set t_ut=''           " Disable deleted coloring
" set t_Co=256          " Force 256 colors
syn sync fromstart    " Calculate syntax colors from start of file

" Turn off visual/audible bell
set visualbell
set t_vb=

" Forces a syntax hl refresh
nnoremap <leader>S :syn sync fromstart<CR>

" Remap no highlight to return
nnoremap <CR> :noh<CR>

" airline config
" let g:airline_theme='dark'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#branch#enabled = 0  " turn off git branch
highlight clear LineNr

" --------------- Indentation and Formatting ----------------------------------

set autoindent      " Copy indent from current line when starting a new one
set smarttab        " <Tab> depends on the value of 'shiftwidth'
set expandtab       " Use appropriate numebr of spaces rather than tab
set shiftround      " Round indent to multiple of shiftwidth
set nowrap          " Don't wrap lines longer than width of the window
set scrolloff=5     " minimal number of lines above/below cursor on scrolling
set tabstop=2       " number of spaces that a <Tab> counts for normally
set softtabstop=2   " number of spaces that a <Tab> counts for while editing
set shiftwidth=2    " Values used by smarttab setting

" --------------- General Settings --------------------------------------------

set nu                            " Turn on numbers
set ruler                         " Show line and col
set mouse=a                       " Enable mouse scrolling, pane selection
set nobackup                      " Prevents potential slow write
set statusline+=%F                " Put filepath in status
set laststatus=2                  " Set status to visible
set directory=~/.vim/swapfiles//  " Change swapfile location for out of wd
set fdm=marker                    " Set default fold method to marker
set backspace=indent,eol,start    " Allow backspace over everything in insert mode
set textwidth=80                  " Default line length in chars

" For non-neovim editors
if !has('nvim')
  set ttymouse=xterm2             " Support tmux 2.2 mouse escape sequences
endif

" HARDMODE
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" Call out to fzf
nnoremap <leader>t :call fzf#vim#gitfiles('.')<cr>
autocmd BufRead * set tags=./tags,tags;$HOME        " Look for tags

" Linewise completion
imap <C-@> <C-Space>
inoremap <C-Space> <C-x><C-l>

" --------------- ColorColumn Toggling ----------------------------------------

" Alternately toggles a color column on or off. Mapped to leader key c.
function! g:ToggleColorColumn()
  if &colorcolumn != ''
    setlocal colorcolumn&
  else
    " Column is positioned 1 col past textwidth
    setlocal colorcolumn=+1
  endif
endfunction

nnoremap <leader>C :call g:ToggleColorColumn()<CR>

" --------------- Searching Settings ------------------------------------------

set hlsearch        " highlight all matches of a search pattern
set incsearch       " Show where the pattern, while typying a search command
set smartcase       " Override 'ignorecase' for upper case search patterns
set ignorecase      " Ignore case of normal letters

" --------------- Filetype Preferences ----------------------------------------

au FileType python setlocal formatprg=autopep8\ -             " Use autopep8 for python gq
au FileType make,go set noexpandtab                           " Force tabs in makefiles
au BufRead,BufNewFile Make.*,Makefile,makefile set ft=make    " Set filetype
au BufRead,BufNewFile package.json set ft=javascript          " Force JSON hl
au BufReadPost *.pegjs set syntax=javascript                  " Force JS hl
au BufRead,BufNewFile *.pro set syntax=prolog                 " Detect prolog
au BufRead,BufNewFile Gemfile set ft=ruby                     " Set ruby syntax for Gemfiles
au BufRead,BufNewFile *.md set ft=markdown                    " Set markdown ft
au BufRead,BufNewFile *.tex set ft=tex                        " Set latex filetype

" --------------- Neomake (nvim Syntastic) Config -----------------------------

autocmd! BufWritePost * Neomake

" Disable extended unicode symbols as the error message, as this plays badly
" with kitty
let g:neomake_warning_sign={'text': 'x'}
let g:neomake_error_sign={'text': 'x'}

let g:terraform_fmt_on_save = 1
let g:neomake_sh_enabled_makers = ['shellcheck']
let g:neomake_zsh_enabled_makers = []
let g:neomake_rust_enabled_makers = ['rustc']
let g:neomake_go_enabled_makers = ['go']
let g:neomake_ruby_enabled_makers = ['bundle', 'mri']
let g:neomake_ruby_bundle_maker = {
    \ 'args': ['--format', 'emacs'],
    \ 'errorformat': '%f:%l:%c: %t: %m',
    \ 'postprocess': function('neomake#makers#ft#ruby#RubocopEntryProcess')
    \ }

" Prevent save from lagging with default syntastic+vim-go combinations
let g:syntastic_go_checkers = ['golint', 'govet']
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }

" --------------- coc.nvim ----------------------------------------------------

" Coc configuration, install if not there:
let g:coc_global_extensions = [
      \'coc-eslint',
      \'coc-go',
      \'coc-json',
      \'coc-prettier',
      \'coc-tsserver',
      \]

" Alias commands. Probably won't use this, but useful as an example:
command! -nargs=0 Prettier :CocCommand prettier.formatFile
command! -nargs=0 ESlint :CocCommand eslint.formatFile

" --------------- YouCompleteMe -----------------------------------------------

let g:ycm_auto_trigger = 0
let g:ycm_min_num_of_chars_for_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_autoclose_preview_window_after_completion = 1

" ---------------coc.nvim -----------------------------------------------------

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" --------------- General Shortcuts -------------------------------------------

" Delete the current file and buffer
nnoremap <Leader>d :call delete(expand('%')) <bar> bdelete!

" Paste from system clipboard
nmap <leader>P :read !pbpaste <CR>

" Enable cut/copy into system clipboard
" Standard Ctrl-C/X shortcuts
vmap <C-x> :!pbcopy<CR>
vmap <C-c> :w !pbcopy<CR><CR>

" Shortcut to destroy trailing whitespace
nmap <leader>s :%s/\v\s+$//<CR>

" Search using silversurfer (ag) for word under cursor
nnoremap <Leader>a :Ag <C-r><C-w><CR>

" Make current file executable
nnoremap <Leader>x :w <bar> !chmod a+x % <CR><CR>

" Shortcut shifting parameters sideways
nmap ,h :SidewaysLeft <CR>
nmap ,l :SidewaysRight <CR>

" --------------- Tmux Integration --------------------------------------------

if $TMUX != ''

  " Integrate movement between tmux/vim panes/windows
  function! TmuxMove(direction)

    " Check if we are currently focusing on a edge window.
    " To achieve that, move to/from the requested window and see if the window
    " number changed

    let old_window = winnr()
    exe 'wincmd ' . a:direction
    let new_window = winnr()

    " Change back to original window
    exe old_window . 'wincmd w'

    if old_window == new_window
      " The focused window is at an edge, so ask tmux to switch panes
      if a:direction == 'j'
        call system("tmux select-pane -D")
      elseif a:direction == 'k'
        call system("tmux select-pane -U")
      elseif a:direction == 'h'
        call system("tmux select-pane -L")
      elseif a:direction == 'l'
        call system("tmux select-pane -R")
      endif
    else
      exe 'wincmd ' . a:direction
    end
  endfun

else

  nmap <C-h> :exe 'wincmd h'<CR>
  nmap <C-j> :exe 'wincmd j'<CR>
  nmap <C-k> :exe 'wincmd k'<CR>
  nmap <C-l> :exe 'wincmd l'<CR>

end

" --------------- Folding! ----------------------------------------------------

" Map space to toggle current fold
noremap <Space> za

" Set foldmethod to indent by default
set foldmethod=indent
set foldlevel=99

" Turn foldcolumn viewing on for a fold visualization
nnoremap <leader>f :call FoldColumnToggle()<cr>
function! FoldColumnToggle()
  if &foldcolumn
    setlocal foldcolumn=0
  else
    setlocal foldcolumn=4
  endif
endfunction

" Configure fold status text
if has("folding")

  function! NeatFoldText()
    let line = ' ' . substitute(getline(v:foldstart), '^\s*"\?\s*\|\s*"\?\s*{{' . '{\d*\s*', '', 'g') . ' '
    let lines_count = v:foldend - v:foldstart + 1
    let lines_count_text = '| ' . printf("%10s", lines_count . ' lines') . ' |'
    let foldchar = matchstr(&fillchars, 'fold:\zs.')
    let foldtextstart = strpart('+' . repeat(foldchar, v:foldlevel*2) . line, 0, (winwidth(0)*2)/3)
    let foldtextend = lines_count_text . repeat(foldchar, 8)
    let foldtextlength = strlen(substitute(foldtextstart . foldtextend, '.', 'x', 'g')) + &foldcolumn
    return foldtextstart . repeat(foldchar, winwidth(0)-foldtextlength) . foldtextend
  endfunction
  set foldtext=NeatFoldText()

endif
" --------------- Golang Preferences ------------------------------------------

" This used to be goimports, but that became really slow for a save hook
" Re-enabling now I've cleaned up my gopath. Uncomment if things get slow again.
" let g:go_fmt_command = "goimports"
let g:go_list_type = "quickfix"

" --------------- TinyOS Preferences ------------------------------------------

" Alias the NesC filetype to C
autocmd BufRead,BufNewFile *.nc set ft=c
