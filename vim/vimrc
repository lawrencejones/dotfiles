set nocompatible              " be iMproved, required
filetype off                  " required

" Set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Source ninja
let ninja_file=expand('/apollo/env/envImprovement/var/vimruntimehook')
if filereadable(ninja_file) | exec "source " . ninja_file | endif

" --------------- Plugins installed -------------------------------------------

" Allow vundle to manage itself
Plugin 'gmarik/Vundle.vim'

" Syntax plugins
Plugin 'scrooloose/syntastic'
Plugin 'slim-template/vim-slim'
Plugin 'digitaltoad/vim-jade'
Plugin 'wavded/vim-stylus'
Plugin 'kchmck/vim-coffee-script'
Plugin 'mintplant/vim-literate-coffeescript'
Plugin 'ap/vim-css-color'
Plugin 'tikhomirov/vim-glsl'
Plugin 'dag/vim2hs'
Plugin 'eagletmt/ghcmod-vim'
Plugin 'rust-lang/rust.vim'

" Utility plugins
Plugin 'tpope/vim-surround'
Plugin 'garybernhardt/selecta'
Plugin 'ervandew/supertab'
Plugin 'vim-scripts/taglist.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'lukaszkorecki/CoffeeTags'
Plugin 'ntpeters/vim-better-whitespace'
Plugin 'rizzatti/dash.vim'
Plugin 'rking/ag.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'bling/vim-airline'
Plugin 'burnettk/vim-angular'
Plugin 'tpope/vim-endwise'
Plugin 'danro/rename.vim'
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'garbas/vim-snipmate'
Plugin 'diepm/vim-rest-console'
Plugin 'tpope/vim-vinegar'
Plugin 'tpope/vim-ragtag'
Plugin 'rorymckinley/vim-rubyhash'
Plugin 'wellle/targets.vim'
Plugin 'nvie/vim-flake8'
Plugin 'Shougo/vimproc.vim'
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-notes'

call vundle#end()

syntax on                     " Turn syntax on
filetype plugin indent on     " Set to detect filetype
set re=1                      " Enable newer regexs

let g:tagbar_left=1           " Vim tagbar shortcut

" --------------- Color and Scheme Preferences --------------------------------

colorscheme molokai
let g:molokai_original = 1

" colorscheme base16-default

set t_ut=             " Disable deleted coloring
set t_Co=256          " Force 256 colors
syn sync fromstart    " Calculate syntax colors from start of file

" Turn off visual/audible bell
set visualbell
set t_vb=

" Forces a syntax hl refresh
nnoremap <leader>S :syn sync fromstart<CR>

" Remap no highlight to return
nnoremap <CR> :noh<CR>

" airline config
let g:airline_theme='dark'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#branch#enabled = 0  " turn off git branch
highlight clear LineNr

" --------------- Indentation and Formatting ----------------------------------

set autoindent      " Copy indent from current line when starting a new one
set smarttab        " <Tab> depends on the value of 'shiftwidth'
set expandtab       " Use appropriate numebr of spaces rather than tab
set shiftround      " Round indent to multiple of shiftwidth
set nowrap          " Don't wrap lines longer than width of the window
set scrolloff=5     " minimal number of lines above/below cursor on scrolling
set tabstop=2       " number of spaces that a <Tab> counts for normally
set softtabstop=2   " number of spaces that a <Tab> counts for while editing
set shiftwidth=2    " Values used by smarttab setting

" --------------- General Settings --------------------------------------------

set nu                            " Turn on numbers
set ruler                         " Show line and col
set mouse=a                       " Enable mouse scrolling, pane selection
set nobackup                      " Prevents potential slow write
set statusline+=%F                " Put filepath in status
set laststatus=2                  " Set status to visible
set directory=~/.vim/swapfiles//  " Change swapfile location for out of wd
set fdm=marker                    " Set default fold method to marker
set backspace=indent,eol,start    " Allow backspace over everything in insert mode
set textwidth=100                 " Default to 100 chars line length

" HARDMODE
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

autocmd BufRead * set tags=./tags,tags;$HOME        " Look for tags
let g:syntastic_mode_map = {
  \ "mode": "active",
  \ "passive_filetypes": ["haml", "scss", "sass"] }
let g:syntastic_javascript_checkers = ['jshint']

" Linewise completion
imap <C-@> <C-Space>
inoremap <C-Space> <C-x><C-l>

" --------------- ColorColumn Toggling ----------------------------------------

" Alternately toggles a color column on or off. Mapped to leader key c.
function! g:ToggleColorColumn()
  if &colorcolumn != ''
    setlocal colorcolumn&
  else
    " Column is positioned 1 col past textwidth
    setlocal colorcolumn=+1
  endif
endfunction

nnoremap <leader>C :call g:ToggleColorColumn()<CR>

" --------------- Searching Settings ------------------------------------------

set hlsearch        " highlight all matches of a search pattern
set incsearch       " Show where the pattern, while typying a search command
set smartcase       " Override 'ignorecase' for upper case search patterns
set ignorecase      " Ignore case of normal letters

" --------------- Filetype Preferences ----------------------------------------

au FileType python setlocal formatprg=autopep8\ -             " Use autopep8 for python gq
au FileType make set noexpandtab                              " Force tabs in makefiles
au BufRead,BufNewFile Make.*,Makefile,makefile set ft=make    " Set filetype
au BufRead,BufNewFile package.json set ft=javascript          " Force JSON hl
au BufReadPost *.pegjs set syntax=javascript                  " Force JS hl
au BufRead,BufNewFile *.pro set syntax=prolog                 " Detect prolog
au BufRead,BufNewFile Gemfile set ft=ruby                     " Set ruby syntax for Gemfiles
au BufRead,BufNewFile *.md set ft=markdown                    " Set markdown ft
au BufRead,BufNewFile *.tex set ft=tex                        " Set latex filetype

" --------------- Preferred Syntastic Checkers --------------------------------

let g:syntastic_python_checkers = ['flake8']
let g:syntastic_python_args = ['--config tox.ini']

" --------------- General Shortcuts -------------------------------------------

" Delete the current file and buffer
nnoremap <Leader>d :call delete(expand('%')) <bar> bdelete!

" Paste from system clipboard
nmap <leader>P :read !pbpaste <CR>

" Enable cut/copy into system clipboard
" Standard Ctrl-C/X shortcuts
vmap <C-x> :!pbcopy<CR>
vmap <C-c> :w !pbcopy<CR><CR>

" Shortcut to destroy trailing whitespace
nmap <leader>s :%s/\v\s+$//<CR>

" Search using silversurfer (ag) for word under cursor
nnoremap <Leader>a :Ag <C-r><C-w><CR>

" Make current file executable
nnoremap <Leader>x :w <bar> !chmod a+x % <CR><CR>

" --------------- Tmux Integration --------------------------------------------

if $TMUX != ''

  " Integrate movement between tmux/vim panes/windows
  function! TmuxMove(direction)

    " Check if we are currently focusing on a edge window.
    " To achieve that, move to/from the requested window and see if the window
    " number changed

    let old_window = winnr()
    exe 'wincmd ' . a:direction
    let new_window = winnr()

    " Change back to original window
    exe old_window . 'wincmd w'

    if old_window == new_window
      " The focused window is at an edge, so ask tmux to switch panes
      if a:direction == 'j'
        call system("tmux select-pane -D")
      elseif a:direction == 'k'
        call system("tmux select-pane -U")
      elseif a:direction == 'h'
        call system("tmux select-pane -L")
      elseif a:direction == 'l'
        call system("tmux select-pane -R")
      endif
    else
      exe 'wincmd ' . a:direction
    end
  endfun

else

  nmap <C-h> :exe 'wincmd h'<CR>
  nmap <C-j> :exe 'wincmd j'<CR>
  nmap <C-k> :exe 'wincmd k'<CR>
  nmap <C-l> :exe 'wincmd l'<CR>

end

" --------------- Folding! ----------------------------------------------------

" Map space to toggle current fold
noremap <Space> za

" Set foldmethod to indent by default
set foldmethod=indent
set foldlevel=99

" Turn foldcolumn viewing on for a fold visualization
nnoremap <leader>f :call FoldColumnToggle()<cr>
function! FoldColumnToggle()
  if &foldcolumn
    setlocal foldcolumn=0
  else
    setlocal foldcolumn=4
  endif
endfunction

" Configure fold status text
if has("folding")

  function! NeatFoldText()
    let line = ' ' . substitute(getline(v:foldstart), '^\s*"\?\s*\|\s*"\?\s*{{' . '{\d*\s*', '', 'g') . ' '
    let lines_count = v:foldend - v:foldstart + 1
    let lines_count_text = '| ' . printf("%10s", lines_count . ' lines') . ' |'
    let foldchar = matchstr(&fillchars, 'fold:\zs.')
    let foldtextstart = strpart('+' . repeat(foldchar, v:foldlevel*2) . line, 0, (winwidth(0)*2)/3)
    let foldtextend = lines_count_text . repeat(foldchar, 8)
    let foldtextlength = strlen(substitute(foldtextstart . foldtextend, '.', 'x', 'g')) + &foldcolumn
    return foldtextstart . repeat(foldchar, winwidth(0)-foldtextlength) . foldtextend
  endfunction
  set foldtext=NeatFoldText()

endif

" --------------- Coffee-Script Preferences -----------------------------------

" Configure coffeescript errors
let g:syntastic_coffee_checkers = ['coffeelint', 'coffee']

" Configure coffeetags
if executable('coffeetags')
  let g:tagbar_type_coffee = {
        \ 'ctagsbin' : 'coffeetags',
        \ 'ctagsargs' : '',
        \ 'kinds' : [
        \ 'f:functions',
        \ 'o:object',
        \ ],
        \ 'sro' : ".",
        \ 'kind2scope' : {
        \ 'f' : 'object',
        \ 'o' : 'object',
        \ }
        \ }
endif

" --------------- TinyOS Preferences ------------------------------------------

" Alias the NesC filetype to C
autocmd BufRead,BufNewFile *.nc set ft=c

" --------------- Selecta Configuration ---------------------------------------

" Run a given vim command on the results of fuzzy selecting from a given shell
" command. See usage below.
function! SelectaCommand(choice_command, selecta_args, vim_command)

  try
    let selection = system(a:choice_command . " | selecta " . a:selecta_args)
  catch /Vim:Interrupt/
    " Swallow the ^C so that the redraw below happens; otherwise there will be
    " leftovers from selecta on the screen
    redraw!
    return
  endtry
  redraw!
  exec a:vim_command . " " . selection

endfunction

" Find all files in all non-dot directories starting in the working directory.
" Fuzzy select one of those. Open the selected file with :e.
" ag: WOO!
nnoremap <leader>t :call SelectaCommand("ag -l", "", ":e!")<cr>
