### PATH CONFIGURATION #########################################################

[ -f ~/.profile ] && source ~/.profile
[ -f /opt/boxen/env.sh ] && source /opt/boxen/env.sh

# Secondary paths (desc importance) ##############

PATH=$PATH:/usr/local/heroku/bin            # Heroku toolbelt
PATH=$PATH:$HOME/Library/Haskell/bin        # Haskell binaries, cabal dependent
PATH=$PATH:/usr/X11R6/bin:/usr/local/sbin   # X11 configuration on mac
PATH=$PATH:/usr/local/CrossPack-AVR/bin     # Add avr toolchain
PATH=$PATH:/usr/local/sicstus4.2.3/bin      # Add prolog binary for sicstus
PATH=$PATH:/usr/local/i386-elf-gcc/bin      # Pintos i386-elf toolchain
PATH=$PATH:$HOME/.vim/bundle/selecta        # Add selecta to path for vim
PATH=$PATH:$HOME/.cargo/bin                 # Cargo binaries

# Primary paths (ascd importance) ################

# Priority paths (ascd importance)
PATH=/usr/local/bin:$PATH                   # brewness
PATH=$HOME/.bin:$PATH                       # custom scripts
PATH=./bin:$PATH                            # current path

export PATH

### SOURCE PACKAGE MANAGERS (RBENV, NVM) #######################################

# Add npm locations to path if node exists
if [ -n "$(node --version 2>/dev/null)" ]; then
  nodeVersion=$(node --version)

  export NODE_PATH="$HOME/.nvm/versions/node/$nodeVersion/lib/node_modules:$NODE_PATH"
  export PATH="./node_modules/.bin:$HOME/.nvm/$nodeVersion/bin:$PATH"
fi

# Load NVM
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm

# Configure rbenv
if [ -n "$(rbenv --version 2>/dev/null)" ];
then
  export PATH="$HOME/.rbenv/shims:${PATH}"
  [ -d /usr/local/Cellar/rbenv/0.4.0 ] && \
    source "/usr/local/Cellar/rbenv/0.4.0/completions/rbenv.zsh"
  rbenv rehash 2>/dev/null
  rbenv() {
    typeset command
    command="$1"
    if [ "$#" -gt 0 ]; then
      shift
    fi

    case "$command" in
    rehash|shell)
      eval `rbenv "sh-$command" "$@"`;;
    *)
      command rbenv "$command" "$@";;
    esac
  }
fi

# Python config
export PIP_REQUIRE_VIRTUALENV=true  # prevent pip from running unless in virtualenv
export VIRTUAL_ENV_DISABLE_PROMPT=true  # turn off patching of prompt

### SELECT GNU COMMANDS ########################################################

# For those commands that require a g prefix, select if exist
cmds=('ls' 'grep' 'find' 'dircolors' 'sed')
for cmd in $cmds
do
  $(hash g$cmd &>/dev/null) && alias $cmd="g$cmd"
done

### CONFIGURE TERMINAL COLORS ##################################################

# Set the ls folder and file color support
export CLICOLOR=1
export   CLRCOL=$'\e[0m'

# Set the theme name
export theme="molokai"  # keep theme choices up to date
source ~/.colors/colors.$theme

# Set terminal to color on
force_color_prompt=yes
# Double check color support#
if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
  color_prompt=yes
    else
  color_prompt=
    fi
fi

### CONFIGURE LS AND GREP ######################################################

# Alias ls colors if supported
$(ls --color=always &>/dev/null) && alias ls='ls --color=always'

# If supported, then run dircolors
dircolors &>/dev/null && {
  $(gls --color=always &>/dev/null) && alias ls='gls --color=always'
  test -r ~/.dircolors/dircolors.$theme &&
    eval "$(dircolors -b ~/.dircolors/dircolors.$theme &>/dev/null)" || eval "$(dircolors -b)"
} || {
  # Default ls and colors
  export LSCOLORS=GxFxCxDxBxegedabagaced
}

# If we have gnu-grep
$(which ggrep &>/dev/null) && alias grep='ggrep --color=auto'

# Force color output in tree
alias tree='tree -C'

### GENERAL ZSH-NESS ###########################################################

# Command history
HISTFILE=$HOME/.zhistory          # save on shell exit
HISTSIZE=1200                     # lines of history
SAVEHIST=1000                     # lines of history on disc
setopt no_share_history           # don't share history
setopt APPEND_HISTORY             # append rather than overwrite
setopt HIST_EXPIRE_DUPS_FIRST     # remove duplicates from history first
setopt EXTENDED_HISTORY           # save timestamp and runtime info

# Enable reverse-i search
bindkey '^R' history-incremental-search-backward

# Intelligent mv
autoload -U zmv

# Autocompletion
fpath=($fpath $HOME/.zsh/completion)
autoload -U compinit
compinit

# Zsh extras
source ~/.zsh/helpers
source ~/.zsh/prompt
source ~/.zsh/aliases

# Make custom completions take priority
for completion in $(ls ~/.zsh/completion); do
  compdef $completion ${completion:1}
done

# Glob-like autocomplete
setopt glob_complete

# History
setopt append_history
setopt share_history
setopt hist_ignore_dups

# Prompt setup
setopt promptsubst

### LOAD OTHER CONFIG ##########################################################

# Load environment
[ -f ~/.private-env ] && source ~/.private-env

# Load autoenv to boot shared .env
[ -f /usr/local/opt/autoenv/activate.sh ] && source /usr/local/opt/autoenv/activate.sh
cd .  # force autoenv to start
