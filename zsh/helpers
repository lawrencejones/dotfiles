#!/usr/bin/env zsh

edit-all() {
  if [[ "$#" -eq 0 ]]; then
    echo """
    Desc:  Given a wildcard, will load queue for vim editing
    Usage: edit-all <file-pattern>
    Examples...

        edit-all '*.coffee'

    """
  else
    find . -name "$1" -exec vim {} \;
  fi
}

sr() {
  if [[ "$#" -eq 0 ]]; then
    echo """
    Desc:  Search and replace with sed
    Usage: sr <file-pattern> <sed-replacement>
    Examples...

        sr '*.coffee' 's/promiseSave/save/g'

    """
  else
    gfind -name "$1" -exec gsed -i "$2" {} \;
  fi
}

trim() {
  sed 's/^\s*//' | sed 's/\s*$//'
}

diffospec() {
  if [ "$1" == "--help" ]; then

    echo """
    Desc:  Runs rspec against files that have changed from a different commit
    Usage: diffospec <sha?>
    Examples...

        diffospec  # compares against parent branch by default
        diffospec 3efc2  # compares against #3efc2

    """

  else

    originalPath=$(pwd)
    cd $(git rev-parse --show-toplevel)

    ref=$1; if [ -z "$ref" ]; then ref=$(git-parent-branch); fi
    echo "Spec'ing against $ref"

    specsWhereFileHasChangedPattern=$(
    git diff "$ref" --name-only --diff-filter=ACMRTUXB \
    | ack -v spec \
    | perl -wnl -e '/^[^\/]+\/(.+)\.rb$/ and print "-wholename \"**/$1_spec.rb\" -o"' \
    | tr '\n' ' ' \
    | sed 's/ -o\s*$//'
    )

    specsWhereFileHasChanged=$(find spec $(echo $specsWhereFileHasChangedPattern | xargs))
    specsThatHaveChanged=$(git diff "$ref" --name-only --diff-filter=ACMRTUXB | ack spec.rb)

    specsToRun=$(echo $specsThatHaveChanged'\n'$specsWhereFileHasChanged | sort -u)

    if [ "$specsToRun" =~ '^ *$' ];
    then
      echo "No specs to run!"
    else
      echo $specsToRun | sed 's/^/- /'
      rspec $(echo $specsToRun | xargs)
    fi

    cd $originalPath

  fi
}

git-current-branch() {
  git rev-parse --abbrev-ref HEAD
}

git-parent-branch() {
  git show-branch -a 2&>/dev/null \
  | ack '\*' \
  | ack -v "$(git-current-branch)" \
  | head -n1 \
  | perl -wnl -e '/\[([^\^\]]*)/ and print $1;'
}

token() {
  if [[ "$#" -eq 0 ]]; then

    echo """
    Desc:  Extracts token from given line
    Usage: token <index> <delimiter?>
    Examples...

        token 2  # whitespace default
        token 1 \"\\\t\"  # tab delimited

    """

  else

    index=$1; : ${index:="1"}
    delimiter=$2; : ${delimiter:=$'\t'}

    cut -d"$delimiter" -f"$index"

  fi
}

line() {
  if [[ "$#" -eq 0 ]]; then

    echo """
    Desc:  Select lines from output
    Usage: line <index-from> <how-many-lines>
    Examples...

        echo -e \"1\\\n2\\\n3\\\n4\\\n5\" | line 2 3  # > 2\\\n3\\\n4

    """

  else

    index=$1; : ${index:="1"}
    count=$2; : ${count:="1"}

    head -n `expr $index + $count - 1` | tail -$count

  fi
}

github() {
  git_remote=$(git remote -v | head -1 | perl -wnl -e '/github.com.([^ ]*)/ and print $1')
  echo Opening $git_remote...
  open "https://github.com/$git_remote"
}

ckdir() {
  mkdir -p $1 && cd $_
}
