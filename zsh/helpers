#!/usr/bin/env zsh

alias p='project'
project() {
  if [[ "$#" -eq 0 ]]; then

    echo """
    Desc:  Pulls and changes to gh repos
    Usage: p <repo-name>
    Examples...

        p dotfiles  # automatically selects LawrenceJones/dotfiles
        p icdocsoc/website  # standard gh url

    """

  else
    githubUrl=$([[ "$1" =~ '/' ]] && echo $1 || echo "lawrencejones/$1")
    project="$GOPATH/src/github.com/${githubUrl}"
    projectLink="$HOME/Projects/$(basename ${project})"

    if [ ! -L "${projectLink}" ]; then
      mkdir -p "${project}"
      rm -rf "${project}"
      git clone "git@github.com:${githubUrl}" "${project}"
      ln -vs "${project}" "${projectLink}"
    fi

    cd "$HOME/Projects" && cd "$(readlink "${projectLink}")"
  fi
}

alias c='cookbook'
cookbook() {
  book=$1; : ${book:=""}
  cd "$HOME/Projects/chef-repo/cookbooks/$book"
}

edit-all() {
  if [[ "$#" -eq 0 ]]; then
    echo """
    Desc:  Given a wildcard, will load queue for vim editing
    Usage: edit-all <file-pattern>
    Examples...

        edit-all '*.coffee'

    """
  else
    find . -name "$1" -exec vim {} \;
  fi
}

sr() {
  if [[ "$#" -eq 0 ]]; then
    echo """
    Desc:  Search and replace with sed
    Usage: sr <source-regex> <replacement>
    Examples...

        sr 'var (\w+);' 'let \$1;'

    """
  else
    ag "$1" -l | xargs perl -p -i -e "s/$1/$2/g"
  fi
}

trim() {
  sed 's/^\s*//' | sed 's/\s*$//'
}

diffospec() {
  if [ "$1" == "--help" ]; then

    echo """
    Desc:  Runs rspec against files that have changed from a different commit
    Usage: diffospec <sha?>
    Examples...

        diffospec  # compares against HEAD^ by default
        diffospec 3efc2  # compares against #3efc2

    """

  else

    originalPath=$(pwd)
    cd $(git rev-parse --show-toplevel)

    ref=$1; if [ -z "$ref" ]; then ref='HEAD^'; fi
    echo "Spec'ing against $ref"

    specsWhereFileHasChangedPattern=$(
    git diff "$ref" --name-only --diff-filter=ACMRTUXB \
    | ack -v spec \
    | perl -wnl -e '/^[^\/]+\/(.+)\.rb$/ and print "-wholename \"**/$1_spec.rb\" -o"' \
    | tr '\n' ' ' \
    | sed 's/ -o\s*$//'
    )

    if [ -n "${specswherefilehaschangedpattern// }" ];
    then
      specsWhereFileHasChanged=$(find spec $(echo $specsWhereFileHasChangedPattern | xargs))
    else
      specsWhereFileHasChanged=""
    fi

    specsThatHaveChanged=$(git diff "$ref" --name-only --diff-filter=ACMRTUXB | ack spec.rb)
    specsToRun=$(echo $specsThatHaveChanged'\n'$specsWhereFileHasChanged | sort -u | ack "\S")

    if [ "$specsToRun" =~ '^ *$' ];
    then
      echo "No specs to run!"
    else
      echo $specsToRun | sed 's/^/- /'
      rspec $(echo $specsToRun | xargs)
    fi

    cd $originalPath

  fi
}

git-current-branch() {
  git rev-parse --abbrev-ref HEAD
}

git-parent-branch() {
  git show-branch -a 2&>/dev/null \
  | ack '\*' \
  | ack -v "$(git-current-branch)" \
  | head -n1 \
  | perl -wnl -e '/\[([^\^\]]*)/ and print $1;'
}

token() {
  if [[ "$#" -eq 0 ]]; then

    echo """
    Desc:  Extracts token from given line
    Usage: token <index> <delimiter?>
    Examples...

        token 2  # whitespace default
        token 1 \"\\\t\"  # tab delimited

    """

  else

    index=$1; : ${index:="1"}
    delimiter=$2; : ${delimiter:=$'\t'}

    cut -d"$delimiter" -f"$index"

  fi
}

line() {
  if [[ "$#" -eq 0 ]]; then

    echo """
    Desc:  Select lines from output
    Usage: line <index-from> <how-many-lines>
    Examples...

        echo -e \"1\\\n2\\\n3\\\n4\\\n5\" | line 2 3  # > 2\\\n3\\\n4

    """

  else

    index=$1; : ${index:="1"}
    count=$2; : ${count:="1"}

    head -n `expr $index + $count - 1` | tail -$count

  fi
}

github() {
  git_remote=$(git remote -v | head -1 | perl -wnl -e '/github.com.([^ ]*)/ and print $1')
  echo Opening $git_remote...
  open "https://github.com/$git_remote"
}

ckdir() {
  mkdir -p $1 && cd $_
}

last-screenshot() {
  echo "$HOME/Dropbox (GoCardless)/Screenshots/$(ls --color=no -t \"$HOME/Dropbox (GoCardless)/Screenshots\" | head -n 1)"
}

# Accept as stdin arguments to apt-get install where if we find a
# package=version stanza, we'll query the apt-cache to find the current
# candidate and update the version to match.
#
# Example content:
#
#     tzdata=2017c-0ubuntu0.16.04 \
#
apt-update-candidate() {
  while IFS=$'\n' read -r line; do
    if read -r package version <<< $(perl -wnl -e '/(\S+?)\=(\S+)/ and print "$1 $2"' <<< "${line}"); then
      candidate="$(apt-cache policy "${package}" | perl -wnl -e '/Candidate: (\S+)/ and print $1')"

      if [ ! "${version}" == "${candidate}" ]; then
        line="${line/$version/$candidate}"
      fi

    fi

    echo "${line}"
  done
}

infra-spend() {
  projects=$(gcloud projects list --filter labels.team:core-infrastructure --format json | jq -r 'map(.projectId) | join(",")')
  open "https://console.cloud.google.com/billing/01755F-1CBB5C-67CB4E/reports;chartType=STACKED_BAR;timeRange=LAST_90_DAYS;projects=${projects}?organizationId=127745229449"
}
