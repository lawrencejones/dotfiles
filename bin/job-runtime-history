#!/usr/bin/env ruby
# See usage below...

require 'rubygems'
require 'dogapi'
require 'active_support/core_ext/time'
require 'slop'
require 'ascii_charts'

# job-runtime-history can be used to fetch data on how long jobs from
# gocardless/payments-service have historically taken to run. These values can be
# outputted in a variety of formats, and selected from a date time range.
opts = Slop.parse do |o|
  o.string  '-j',   '--job',         'CreateFees'
  o.string  '-t0',  '--start-date',  '2016-07-13'
  o.string  '-t1',  '--finish-date', '2016-08-16',          default:  Date.today.to_s
  o.string  '-s',   '--stage',       'production|staging',  default:  'production'
  o.string  '-e',   '--env',         'live|sandbox',        default:  'live'
  o.string  '-f',   '--format',      'spark|chart|values',  default:  'chart'
  o.on      '-h',   '--help' do
    puts(o)
    exit
  end
end.to_hash

class JobRuntimes
  API_KEY = ENV.fetch('GC_DATADOG_API_KEY')
  APP_KEY = ENV.fetch('GC_DATADOG_APP_KEY')

  JOB_EVENT_REGEX = /Run (?<id>\S+) of (?<job>\S+) finished .* (?<duration>\d+)ms/

  def initialize(job, start:, finish:, stage:, env:)
    @start = start
    @finish = finish
    @dog = Dogapi::Client.new(API_KEY, APP_KEY)
    @job_tags = ["env:#{stage}", 'job', "tag:#{env}", "job:#{job.downcase}"]
  end

  attr_reader :dog, :start, :finish

  def in_period
    events_in_period.
      sort_by { |e| e['date_happened'] }.
      select  { |e| e['alert_type'] == 'success' }.
      map do |event|
        event_details = JOB_EVENT_REGEX.match(event['text'])
        next unless event_details

        # In seconds
        [event['date_happened'], event_details[:duration].to_i / 1_000]
      end.compact
  end

  # Handle limit on querying timeframe by paging through the period
  def events_in_period
    t0 = start.midnight
    tf = finish.end_of_day

    events = []
    while t0 < tf
      t1 = [t0.advance(days: 21), tf].min
      events.concat(dog.stream(t0, t1, tags: @job_tags)[1]['events'])
      t0 = t1
    end
    events
  end
end

runtimes = JobRuntimes.
  new(opts[:job],
      start: Date.parse(opts[:start_date]),
      finish: Date.parse(opts[:finish_date]),
      stage: opts[:stage],
      env: opts[:env]).in_period

case opts[:format]
when 'spark'  then puts %x{spark #{runtimes.map(&:last).join(' ')}}
when 'values'
  runtimes.each do |t, runtime|
    puts "#{Time.at(t).to_date},#{runtime}"
  end
when 'chart'
  # Bar chart
  puts AsciiCharts::Cartesian.new(runtimes.map do |(t,runtime)|
    [Time.at(t).strftime('%d/%m'), runtime]
  end, title: "!! Jobs::#{opts[:job]} historic runtimes !!").draw
end

