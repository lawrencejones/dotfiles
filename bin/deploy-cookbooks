#!/usr/bin/env bash
# Deploy changes in a chef-repo branch to chef environment

set -euo pipefail

if [[ ! "$#" -eq 1 ]]; then
  echo """
    Desc:  Deploy cookbooks with higher versions than on chef-server
    Usage: deploy-cookbooks <chef-environment>
    Examples...

        deploy-cookbooks staging

  """
  exit 255
fi

function list-cookbooks() {
  git ls-files cookbooks/*/metadata.rb | xargs -n1 dirname | xargs -n1 basename
}

function cookbooks-that-require-deploy() {
  for CB in $(list-cookbooks); do
    require-deploy "$CB" && echo "$CB"
  done
}

# require-deploy <cookbook>
function require-deploy() {
  local CMP; CMP="$(local-cookbook-version "$CB")\n$(chef-cookbook-version "$CB")"
  [ "$(echo -e "$CMP")" != "$(echo -e "$CMP" | sort -t '.' -k 1,1 -k 2,2 -k 3,3 -g)" ]
}


# local-cookbook-version <cookbook>
function local-cookbook-version() {
  perl -wnl -e '/^version.+?([0-9.]+)/ and print $1' < "cookbooks/$1/metadata.rb"
}

# chef-cookbook-version <cookbook>
# Caches the current cookbook versions in CHEF_COOKBOOK_VERSIONS so we don't
# need to do n lookups
function chef-cookbook-version() {
  perl -wnl -e "/^$1\s+([0-9.]+)/ and print \$1" <<< "$CHEF_COOKBOOK_VERSIONS"
}

function print-deploy-plan() {
  echo -e "Deploying $BRANCH to $KNIFE_ENV will deploy: ["
  for CB in "${COOKBOOKS[@]}"; do
    echo "$CB [$(chef-cookbook-version "$CB") ~> $(local-cookbook-version "$CB")]"
  done | column -t | sed 's/^/    /g'
  echo -e "]\n"
}

function confirm() {
  echo -n "${1} [y/n] " && read -r YN
  if [ ! "$YN" == 'y' ]; then
    echo "Did not receive yes, exiting!"
    return 255
  fi
  echo # for whitespace
}

# Uploads all cookbooks included in this change.
function upload-cookbooks() {
  for CB in "${COOKBOOKS[@]}"; do
    basename "$CB"
  done | xargs bundle exec knife cookbook upload
  echo # for whitespace
}

# Runs chef-client on all the nodes that have recipes in their runlist that belong to the
# cookbooks that have been changed. This will most likely be the nodes that need updating
# with this change, unless something really weird is going on (in which case manually
# deploying cookbooks is your best bet, not this script).
function run-chef() {
  local NODE_PATTERN
  NODE_PATTERN="$(printf 'recipes:%s\:\:* OR ' "${COOKBOOKS[@]}" | sed 's/ OR $//')"

  echo -e "Run chef on nodes matching '$NODE_PATTERN'\n"
  bundle exec knife ssh -C 20 -x "$USER" -a softlayer.private_ip --ssh-port "$GC_PORT" \
    "$NODE_PATTERN" -- sudo bash -c "'hostname -f && chef-client 2>&1 >> /var/log/chef/client.log'"
}

KNIFE_ENV="$1"
BRANCH="$(git rev-parse --abbrev-ref HEAD)"
CHEF_COOKBOOK_VERSIONS="$(bundle exec knife cookbook list)"
COOKBOOKS=(); for CB in $(cookbooks-that-require-deploy); do
  COOKBOOKS+=("$CB")
done

if [ "${#COOKBOOKS}" == 0 ]; then
  echo "No cookbooks to deploy, exiting"
  exit 255
fi

print-deploy-plan && \
  confirm "Upload cookbooks?" && upload-cookbooks && \
  confirm "Run Chef?" && run-chef
