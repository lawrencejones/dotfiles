// Generated by CoffeeScript 1.6.3
(function() {
  var args, confirmed, deleteFile, deleteFiles, exec, files, flags, fs, path, prompt, rf, rm, _ref,
    __slice = [].slice;

  fs = require('fs');

  path = require('path');

  exec = require('child_process').exec;

  args = process.argv.slice(2);

  _ref = [[], []], files = _ref[0], flags = _ref[1];

  rf = 1 < args.reduce((function(a, c) {
    if (c === '-r' || c === '-f') {
      a++;
    } else if (c === '-rf') {
      a += 2;
    } else if (/-.+/.test(c)) {
      flags.push(c);
    } else {
      files.push(c);
    }
    return a;
  }), 0);

  confirmed = [];

  rm = function() {
    var cmd;
    cmd = 'rm ';
    if (rf) {
      cmd += '-rf';
    }
    return exec("" + cmd + " " + (flags.join(' ')) + " " + (confirmed.join(' ')), function() {
      var err, s, streams, _i, _len, _results;
      err = arguments[0], streams = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      _results = [];
      for (_i = 0, _len = streams.length; _i < _len; _i++) {
        s = streams[_i];
        _results.push(process.stdout.write(s));
      }
      return _results;
    });
  };

  prompt = function(fname, cb) {
    return require('read')({
      prompt: 'Sure? [y/n] '
    }, function(err, res) {
      if (/y/i.test(res)) {
        confirmed.push(fname);
        return typeof cb === "function" ? cb() : void 0;
      } else {
        console.log("Then THANK GOD you wrote this.");
        return process.exit(1);
      }
    });
  };

  deleteFile = function(fname, cb) {
    var countdown;
    if (fs.existsSync(path.join(fname, '.git'))) {
      console.log("The folder " + fname + " is a git repository.");
      console.log("Think CAREFULLY about whether you wish to destroy it.");
      countdown = function(i) {
        console.log("   " + i);
        if (i > 0) {
          return setTimeout((function() {
            return countdown(--i);
          }), 1000);
        } else {
          return prompt(fname, cb);
        }
      };
      return countdown(3);
    } else {
      confirmed.push(fname);
      return typeof cb === "function" ? cb() : void 0;
    }
  };

  deleteFiles = function() {
    if (files.length === 0) {
      return rm();
    } else {
      return deleteFile(files.shift(), deleteFiles);
    }
  };

  deleteFiles(files);

}).call(this);
